# -*- coding: utf-8 -*-
"""Practica 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KzgvlzlwuW38P7WEIWPvpoaRb4rdtqYF
"""



"""# Practica 02

Alumno: David Pérez Jacome \\
Número de Cuenta: 316330420

1- Implementar un etiquetador POS para el idioma otomí
Escenario retador de bajos recursos lingüísticos (low-resources)
Considerar que las feature functions deben cambiar (van acorde a la lengua)
Pueden usar bibliotecas conocidas para la implementación
Reportar accurary, precision, recall y F1-score
Mostrar un ejemplo de oracion etiquetada (Debe ser una oracion del conjunto de pruebas). Formato libre
"""

!pip install nltk
!pip install scikit-learn

!python -m spacy download es_core_news_sm
!pip install -U sklearn-crfsuite

!pip install spacy
!python -m spacy download es_core_news_sm

import spacy
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from spacy.training.example import Example

# Cargar el modelo base en español
nlp = spacy.load("es_core_news_sm")

# Definir un conjunto de datos de entrenamiento y prueba (sustituir con datos reales)
train_data = [
    ("Ndoti otomí b'i̲t'i̲ jño", {"tags": ["NOUN", "ADJ", "NOUN", "ADV", "VERB"]}),
    ("Ngüne̲r'e̲ ojno jno", {"tags": ["NOUN", "ADV", "VERB", "ADV"]}),
    # Agrega más ejemplos de entrenamiento con sus respectivas etiquetas POS
]

test_data = [
    ("B'o̲ ñi ñüma", {"tags": ["ADP", "NOUN", "VERB", "NOUN"]}),
    ("Ngi̲e̲ gu̲i̲ nño b'i̲t'i̲", {"tags": ["VERB", "NOUN", "ADP", "NOUN", "ADV"]}),
    # Agrega más ejemplos de prueba con sus respectivas etiquetas POS
]

# Obtener el componente "morphologizer" y "tok2vec" del modelo
morphologizer = nlp.get_pipe("morphologizer")
tok2vec = nlp.get_pipe("tok2vec")

# Entrenar el modelo
for text, annotations in train_data:
    doc = nlp.make_doc(text)
    tags = annotations["tags"]
    biluo_tags = spacy.training.iob_utils.offsets_to_biluo_tags(doc, [(token.idx, token.idx + len(token.text), tag) for token, tag in zip(doc, tags)])
    example = Example.from_dict(doc, {"tags": biluo_tags})
    with nlp.select_pipes(enable=["morphologizer", "tok2vec"]):
        nlp.update([example], drop=0.5)

# Evaluar el modelo
y_true = []
y_pred = []

for text, annotations in test_data:
    doc = nlp(text)
    gold_tags = annotations.get("tags", [])
    predicted_tags = [token.pos_ for token in doc]

    # Asegurarse de que las longitudes sean iguales
    min_len = min(len(gold_tags), len(predicted_tags))
    y_true.extend(gold_tags[:min_len])
    y_pred.extend(predicted_tags[:min_len])

# Imprimir y_true y y_pred
print("y_true:", y_true)
print("y_pred:", y_pred)

# Calcular métricas
accuracy = accuracy_score(y_true, y_pred)
precision = precision_score(y_true, y_pred, average='weighted')
recall = recall_score(y_true, y_pred, average='weighted')
f1 = f1_score(y_true, y_pred, average='weighted')

# Mostrar métricas
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

# Ejemplo de oración etiquetada
example_sentence = "Oración de prueba para el etiquetador POS en otomí."
doc = nlp(example_sentence)
for token in doc:
    print(f"{token.text}: {token.pos_}")